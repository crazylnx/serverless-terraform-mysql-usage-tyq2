/// <reference types="node" />
import SPI, * as $SPI from '@alicloud/gateway-spi';
import Credential from '@alicloud/credentials';
import * as $tea from '@alicloud/tea-typescript';
export declare class HttpRequest extends $tea.Model {
    method: string;
    path: string;
    headers?: {
        [key: string]: any;
    };
    body?: Buffer;
    reqBodyType?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends SPI {
    constructor();
    modifyConfiguration(context: $SPI.InterceptorContext, attributeMap: $SPI.AttributeMap): Promise<void>;
    modifyRequest(context: $SPI.InterceptorContext, attributeMap: $SPI.AttributeMap): Promise<void>;
    modifyResponse(context: $SPI.InterceptorContext, attributeMap: $SPI.AttributeMap): Promise<void>;
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
    defaultAny(inputValue: any, defaultValue: any): any;
    signRequestForFc(context: $SPI.InterceptorContext): Promise<void>;
    signRequestForPop(context: $SPI.InterceptorContext): Promise<void>;
    getAuthorizationForFc(pathname: string, method: string, query: {
        [key: string]: string;
    }, headers: {
        [key: string]: string;
    }, ak: string, secret: string): Promise<string>;
    getSignatureForFc(pathname: string, method: string, query: {
        [key: string]: string;
    }, headers: {
        [key: string]: string;
    }, secret: string): Promise<string>;
    buildCanonicalizedResourceForFc(pathname: string, query: {
        [key: string]: string;
    }): Promise<string>;
    buildCanonicalizedHeadersForFc(headers: {
        [key: string]: string;
    }): Promise<string>;
    getAuthorizationForPop(pathname: string, method: string, query: {
        [key: string]: string;
    }, headers: {
        [key: string]: string;
    }, signatureAlgorithm: string, payload: string, ak: string, secret: string): Promise<string>;
    getSignatureForPop(pathname: string, method: string, query: {
        [key: string]: string;
    }, headers: {
        [key: string]: string;
    }, signatureAlgorithm: string, payload: string, secret: string): Promise<string>;
    buildCanonicalizedResourceForPop(query: {
        [key: string]: string;
    }): Promise<string>;
    buildCanonicalizedHeadersForPop(headers: {
        [key: string]: string;
    }): Promise<string>;
    getSignedHeaders(headers: {
        [key: string]: string;
    }): Promise<string[]>;
    signRequest(request: HttpRequest, credential: Credential): Promise<{
        [key: string]: any;
    }>;
    buildCanonicalizedResource(pathname: string): Promise<string>;
    buildCanonicalizedHeaders(headers: {
        [key: string]: any;
    }): Promise<string>;
}
